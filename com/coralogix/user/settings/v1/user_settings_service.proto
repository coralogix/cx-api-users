syntax = "proto3";

package com.coralogix.user.settings.v1;

import "com/coralogix/user/settings/v1/archiving_provider.proto";
import "com/coralogix/user/settings/v1/digest.proto";
import "com/coralogix/user/settings/v1/email_filter.proto";
import "com/coralogix/user/settings/v1/external_tokens.proto";
import "com/coralogix/user/settings/v1/log_column.proto";
import "com/coralogix/user/settings/v1/user_settings.proto";
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

message AuditLogDescription {
  optional string description = 1;
}

extend google.protobuf.MethodOptions {
  AuditLogDescription audit_log_description = 5000;
}

service UserSettingsService {
  rpc GenerateNewApiKeyForUser(GenerateNewApiKeyForUserRequest) returns (GenerateNewApiKeyForUserResponse) {
    option (audit_log_description).description = "generate new api key for user";
    option (google.api.http) = {
      post: "/api/v1/user/settings/api_key"
      body: "user_settings"
    };
  }

  rpc GenerateNewEsApiKeyForUser(GenerateNewEsApiKeyForUserRequest) returns (GenerateNewEsApiKeyForUserResponse) {
    option (audit_log_description).description = "generate new es-api key for user";
    option (google.api.http) = {
      post: "/api/v1/user/settings/es_api_key"
      body: "user_settings"
    };
  }

  rpc GenerateNewTeamsApiKeyForUser(GenerateNewTeamsApiKeyForUserRequest) returns (GenerateNewTeamsApiKeyForUserResponse) {
    option (audit_log_description).description = "generate new team-api key for user";
    option (google.api.http) = {
      post: "/api/v1/user/settings/teams_api_key"
      body: "user_settings"
    };
  }

  rpc GetAllExternalTokens(GetAllExternalTokensRequest) returns (GetAllExternalTokensResponse) {
    option (audit_log_description).description = "get all external tokens";
    option (google.api.http) = {
      get: "/api/v1/user/external-tokens"
      body: "external_integration_configs"
    };
  }

  rpc CreateExternalToken(CreateExternalTokenRequest) returns (CreateExternalTokenResponse) {
    option (audit_log_description).description = "create external token";
    option (google.api.http) = {
      post: "/api/v1/user/external-tokens"
      body: "external_integration_config"
    };
  }

  rpc UpdateExternalToken(UpdateExternalTokenRequest) returns (UpdateExternalTokenResponse) {
    option (audit_log_description).description = "update external token";
    option (google.api.http) = {
      put: "/api/v1/user/external-tokens/{tokenId}"
      body: "external_integration_config"
    };
  }

  rpc DeleteExternalToken(DeleteExternalTokenRequest) returns (DeleteExternalTokenResponse) {
    option (audit_log_description).description = "delete external token";
    option (google.api.http) = {
      delete: "/api/v1/user/external-tokens/{tokenId}"
    };
  }

  rpc TestGetArchiveProviders(TestGetArchiveProvidersRequest) returns (TestGetArchiveProvidersResponse) {
    option (audit_log_description).description = "test get archive providers";
    option (google.api.http) = {
      get: "/api/v1/testGetFilters"
      body: "*"
    };
  }

  rpc GetAllEmailFilters(GetAllEmailFiltersRequest) returns (GetAllEmailFiltersResponse) {
    option (audit_log_description).description = "get all email filters";
    option (google.api.http) = {
      get: "/api/v1/emailFilters"
      body: "*"
    };
  }

  rpc AddEmailFilter(AddEmailFilterRequest) returns (AddEmailFilterResponse) {
    option (audit_log_description).description = "add email filter";
    option (google.api.http) = {
      post: "/api/v1/emailFilters"
      body: "email_filter_definition"
    };
  }

  rpc UpdateEmailFilter(UpdateEmailFilterRequest) returns (UpdateEmailFilterResponse) {
    option (audit_log_description).description = "update email filter";
    option (google.api.http) = {
      post: "/api/v1/emailFilters/edit"
      body: "email_filter_definition"
    };
  }

  rpc DeleteEmailFilter(DeleteEmailFilterRequest) returns (DeleteEmailFilterResponse) {
    option (audit_log_description).description = "delete email filter";
    option (google.api.http) = {
      delete: "/api/v1/emailFilters/{id}"
      body: "deleted"
    };
  }

  rpc UpdateUserSettings(UpdateUserSettingsRequest) returns (UpdateUserSettingsResponse) {
    option (audit_log_description).description = "update user settings";
    option (google.api.http) = {
      post: "/api/v1/user/settings"
      body: "user_settings"
    };
  }

  rpc GetUserSettings(GetUserSettingsRequest) returns (GetUserSettingsResponse) {
    option (audit_log_description).description = "get user settings";
    option (google.api.http) = {
      delete: "/api/v1/user/settings"
      body: "user_settings"
    };
  }

  rpc GetAllLogColumns(GetAllLogColumnsRequest) returns (GetAllLogColumnsResponse) {
    option (audit_log_description).description = "get all log columns";
    option (google.api.http) = {
      get: "/api/v1/user/logColumn"
      body: "log_columns"
    };
  }

  rpc AddNewLogColumn(AddNewLogColumnRequest) returns (AddNewLogColumnResponse) {
    option (audit_log_description).description = "add new log column";
    option (google.api.http) = {
      post: "/api/v1/user/logColumn"
      body: "log_column"
    };
  }

  rpc DeleteLogColumn(DeleteLogColumnRequest) returns (DeleteLogColumnResponse) {
    option (audit_log_description).description = "delete log column";
    option (google.api.http) = {
      delete: "/api/v1/user/logColumn/{id}"
    };
  }

  rpc GetDigests(GetDigestsRequest) returns (GetDigestsResponse) {
    option (audit_log_description).description = "get digests";
    option (google.api.http) = {
      get: "/api/v1/digests"
      body: "digests"
    };
  }

  rpc UpdateDigests(UpdateDigestsRequest) returns (UpdateDigestsResponse) {
    option (audit_log_description).description = "update digests";
    option (google.api.http) = {
      post: "/api/v1/digests"
      body: "*"
    };
  }
}

message GenerateNewApiKeyForUserRequest{}

message GenerateNewApiKeyForUserResponse{
  UserSettings user_settings = 1;
}

message GenerateNewEsApiKeyForUserRequest{}

message GenerateNewEsApiKeyForUserResponse{
  UserSettings user_settings = 1;
}

message GenerateNewTeamsApiKeyForUserRequest{}

message GenerateNewTeamsApiKeyForUserResponse{
  UserSettings user_settings = 1;
}

message GetAllExternalTokensRequest{}

message GetAllExternalTokensResponse{
  ExternalIntegrationConfigWithData   Slack = 1 [
    (source_system_option) = SOURCE_SYSTEM_SLACK,
    (type_option) = EXTERNAL_KEY_TYPE_TOKEN
  ];
  ExternalIntegrationConfigWithData   AwsSns = 2;
  // 			sourceSystem: 'AwsSns',
  // 			type: externalKeysTypes.TOKEN,
  ExternalIntegrationConfigWithData   Bitbucket = 3;
  // 			sourceSystem: 'Bitbucket',
  // 			type: externalKeysTypes.TOKEN,
  ExternalIntegrationConfigWithData	  GitHub = 4;
  // 			sourceSystem: 'GitHub',
  // 			type: externalKeysTypes.TOKEN,
  ExternalIntegrationConfigWithData		GitLab = 5;
  // 			sourceSystem: 'GitLab',
  // 			type: externalKeysTypes.TOKEN,
  ExternalIntegrationConfigWithData   PagerDuty = 6;
  // 			sourceSystem: 'PagerDuty',
  // 			type: externalKeysTypes.TOKEN,
  ExternalIntegrationConfigWithData   Opsgenie = 7;
  // 			sourceSystem: 'Opsgenie',
  // 			type: externalKeysTypes.TOKEN,
  ExternalIntegrationConfigWithData   Prometheus = 8;
  // 			sourceSystem: 'Prometheus',
  // 			type: externalKeysTypes.TOKEN,
  ExternalIntegrationConfig            AWS = 9;
  // 			sourceSystem: 'AWS',
  // 			type: externalKeysTypes.FLAG,
  // 			active: false,
  // 			id: ''
  ExternalIntegrationConfig           GCP = 10;
  // 			sourceSystem: 'GCP',
  // 			type: externalKeysTypes.FLAG,
  // 			active: false,
  // 			id: ''
  ExternalIntegrationConfig           Azure = 11;
  // 			sourceSystem: 'Azure',
  // 			type: externalKeysTypes.FLAG,
  // 			active: false,
  // 			id: ''
  ExternalIntegrationConfigWithData   Statuspage = 12;
  // 			sourceSystem: 'Statuspage',
  // 			type: externalKeysTypes.STATUSPAGE,
  ExternalIntegrationConfigWithData   Cloudflare = 13;
  // 			sourceSystem: 'Cloudflare',
  // 			type: externalKeysTypes.CLOUDFLARE,
  ExternalIntegrationConfigWithData   Intercom = 14;
  // 			sourceSystem: 'Intercom',
  // 			type: externalKeysTypes.INTERCOM,
}

message CreateExternalTokenRequest{
  google.protobuf.StringValue name = 1;
  SourceSystem                source_system = 2;
  google.protobuf.StringValue config = 3; // Json
  google.protobuf.StringValue token = 4;
}
message CreateExternalTokenResponse{
  ExternalIntegrationConfig external_integration_config = 1;
}

message UpdateExternalTokenRequest{
  google.protobuf.StringValue token_id = 1;
  google.protobuf.StringValue token = 2;
}
message UpdateExternalTokenResponse{
  ExternalIntegrationConfig external_integration_config = 1;
}

message DeleteExternalTokenRequest{
  google.protobuf.StringValue token_id = 1;
}
message DeleteExternalTokenResponse{}

message TestGetArchiveProvidersRequest {}
message TestGetArchiveProvidersResponse {
  repeated ArchivingProvider archiving_providers = 1;
}


message GetAllEmailFiltersRequest{}
message GetAllEmailFiltersResponse{
  google.protobuf.UInt32Value    id = 1;
  google.protobuf.StringValue    user_id = 2;
  google.protobuf.Timestamp      created_at = 3;
  google.protobuf.Timestamp      updated_at = 4;
  repeated EmailFilterDefinition email_filter_definitions = 5;
}

message AddEmailFilterRequest{
  google.protobuf.StringValue  application_name = 1;
  repeated google.protobuf.StringValue subsystem_name = 2;
}
message AddEmailFilterResponse{
  EmailFilterDefinition email_filter_definition = 1;
}

message UpdateEmailFilterRequest{
  google.protobuf.StringValue           application_name = 1;
  google.protobuf.UInt32Value           id = 2;
  repeated google.protobuf.StringValue  subsystem_name = 3;
}
message UpdateEmailFilterResponse{
  EmailFilterDefinition email_filter_definition = 1;
}

message DeleteEmailFilterRequest{
  google.protobuf.UInt32Value id = 1;
}
message DeleteEmailFilterResponse{
  google.protobuf.BoolValue deleted = 1;
}

message UpdateUserSettingsRequest{
  UserSettings user_settings = 1;
}
message UpdateUserSettingsResponse{
  UserSettings user_settings = 1;
}

message GetUserSettingsRequest{}
message GetUserSettingsResponse{
  UserSettings user_settings = 1;
}

message GetAllLogColumnsRequest{}
message GetAllLogColumnsResponse{
  repeated LogColumn log_columns = 1;
}

message AddNewLogColumnRequest{
  google.protobuf.StringValue header_name = 1;
  google.protobuf.StringValue field_name = 2;
}
message AddNewLogColumnResponse{
  LogColumn log_column = 1;
}

message DeleteLogColumnRequest{}
message DeleteLogColumnResponse{}

message GetDigestsRequest{}
message GetDigestsResponse{
  repeated Digest digests = 1;
}

message UpdateDigestsRequest{
  google.protobuf.UInt32Value id = 1;
  google.protobuf.BoolValue   enabled = 2;
}
// TODO make sure it is compatible, previous response looked like this [null,1]
message UpdateDigestsResponse{
  google.protobuf.BoolValue updated = 1;
}